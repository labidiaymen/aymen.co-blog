{"componentChunkName":"component---src-templates-blog-post-js","path":"/log/2015-10-18-node-js-4-classes/","result":{"data":{"site":{"siteMetadata":{"title":"Labidi Aymen"}},"markdownRemark":{"id":"cf644293-ee9e-531c-abdb-d724d0af97c1","excerpt":"ES6 classes are not something new, they mainly provide more convenient syntax to create old-school constructor functions. We also use es6 string template in the…","html":"<p>ES6 classes are not something new, they mainly provide more convenient syntax to create old-school constructor functions.</p>\n<p>We also use es6 string template in the example :</p>\n<p>[js] ‘use strict’</p>\n<p>class Person{ constructor(p){ this.name = p.name; this.lastname = p.lastname; }</p>\n<p>fullName(){ return `${this.name} ${this.lastname}` } }</p>\n<p>console.log( new Person({ name : “Aymen”, lastname : “Labidi” }).fullName() );</p>\n<p>[/js]</p>\n<p> </p>\n<p>  Classic class and subclass example :</p>\n<p> </p>\n<p>[js] class Point { constructor(x, y) { this.x = x; this.y = y; } toString() { return `(${this.x}, ${this.y})`; } }</p>\n<p>class ColorPoint extends Point { constructor(x, y, color) { super(x, y); this.color = color; } toString() { return super.toString() + ’ in ’ + this.color; } } [/js]</p>","frontmatter":{"title":"NODE.JS 4 CLASSES","date":"October 18, 2015","description":null,"cover":null}},"previous":{"fields":{"slug":"/2015-10-16-node-js-4-generators/"},"frontmatter":{"title":"Node.js 4 generators"}},"next":{"fields":{"slug":"/2015-10-19-changing-the-world/"},"frontmatter":{"title":"Changing the world"}}},"pageContext":{"id":"cf644293-ee9e-531c-abdb-d724d0af97c1","previousPostId":"8f651d43-c1aa-5be9-ad44-6e4f5b804917","nextPostId":"cbc0231d-cbf1-5887-8ab6-444e75ee0c36","category":"log"}},"staticQueryHashes":["2841359383"]}