{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/microfrontend/","result":{"data":{"site":{"siteMetadata":{"title":"Labidi Aymen"}},"markdownRemark":{"id":"f06b9f7a-a50e-51a2-9ed0-83f18fde6d37","excerpt":"Back in 1997, Internet Explorer (which is dead right now ) introduced Iframe which is an HTML element that helps integrate webpage inside another.\r\nIn this caseâ€¦","html":"<h2></h2>\n<p>Back in 1997, Internet Explorer (which is dead right now ) introduced Iframe which is an HTML element that helps integrate webpage inside another.\r\nIn this case, we can have a parent application that calls a second party application via the url only.</p>\n<p>This feature has been explored widely in the enterprise application, which provided a good way to build applications on top of each other.</p>\n<p>After the rise of the front-end Framework, a single page application becomes (SPA) has become so popular; SPA forces search engines to render web pages and extract SEO tags.</p>\n<p>Years later, we started having a wide range of front-end frameworks, some of them are deprecated now. This variety gives the opportunity to use multiple frameworks at the same time, as some are more powerful than others in some features.</p>\n<p>The problematic is that re-writing existing code is painful, keeping the code up to date is even more painful.</p>\n<p>Before the rise of the microfrontend architecture, microservices were already being used in the back-end which gave more flexibility to the technologies used.</p>\n<p>Long short story: microfrontend is the same as microservices, but in the front-end.</p>\n<h2>Open the door to multi-Framework frontend</h2>\n<p>When we started writing front-end frameworks, many libraries started poping up to make developers' lives easier and add boost their productivity. One of these libraries is jQuery.</p>\n<p>Then, MVVM Frameworks appeared and offered two-way binding.</p>\n<p>After developing a complete application using one framework, there's no way to start using another. Wheras, using Microfrontend, multiple Frameworks can co-exist within the same application.</p>\n<p>Let's have an example:</p>\n<p>We started building an enterprise application and the Front-end Architect choose Angular Framework as the main Framework.\r\nBut after starting the project, we found that React Library is faster than Angular in rendering complex views.</p>\n<p>Here comes Microfrontend as it offers the possibility to write a part of the application using a different Framework/Library.</p>\n<p><img src=\"/images/MF-apps.drawio.png\" alt=\"\"></p>\n<h2>Agile friendly</h2>\n<p>With Microfrontend technologies, each feature can be a standalone application that has its own development cycle.\r\nThis allows us to create small independent Teams.</p>\n<p >\r\n<img src=\"/images/MF1.drawio.png\" />\r\n</p>\n<p >\r\n<img src=\"/images/MF2.drawio.png\" />\r\n</p>\n<h2>Independent deployments</h2>\n<p>In the microfrontend Architecture, each feature or module is represented by an independent project, which gives the capability to independently deploy each project without the need to build the entire project.</p>\n<p >\r\n<img src=\"/images/MF3.drawio.png\" />\r\n</p>\n<h2>Progressive migration</h2>\n<p>Let's say that a company has a 10-years-old frontend application written with Angular.js and now the company decided to migrate it to Angular.</p>\n<p>There are two possible ways to do this:</p>\n<p>1/ Start a Hybrid project that has Angular and Angular.js at the same time, which is possible, and there are many useful tools with a good documentation that can accompany dev teams in the project migration journey. This does not apply to all projects equally, some of them can touch the limit before fulfilling the migration.</p>\n<p>2/ Implement Microfrontend by starting a new project, this will mount the old views next to the new ones and write all new features using the new framework, then with a great plan, you can start to securely migrating the features one by one.</p>\n<h2>Conclusion</h2>\n<p>Micro-Frontend Architecture it's not a hype, it's here to stay, we are doing it from the beginning  but the technologies change over time.</p>\n<p>Opening the door to the micro front can be a huge advantage to adopt new technologies on the go. It's time to give it a try.</p>\n<h2></h2>","frontmatter":{"title":"The era of the Microfrontend","date":"June 21, 2022","description":null,"categories":["javascript","angular"],"cover":"../images/microfrontend.jpeg"}},"previous":{"fields":{"slug":"/angular-standalone-components/"},"frontmatter":{"title":"Angular 14: Standalone components"}},"next":{"fields":{"slug":"/Invalid DateTime-/"},"frontmatter":{"title":"What you need to know about Tech Job in Tunisia"}}},"pageContext":{"id":"f06b9f7a-a50e-51a2-9ed0-83f18fde6d37","previousPostId":"cc24c98c-faf9-5c6b-9335-227232ec80b9","nextPostId":"03225bf2-951f-5922-8a65-9926e0e254f9","category":"javascript"}},"staticQueryHashes":["2841359383"]}